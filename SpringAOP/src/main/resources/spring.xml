<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

	<!-- Enable AspectJ style of Spring AOP -->
	<aop:aspectj-autoproxy />

	<!-- Configure Employee Bean and initialize it -->
	<bean name="employee" class="com.pacsun.model.Employee">
		<property name="name" value="Dummy Name"></property>
	</bean>

	<!-- Configure EmployeeService bean -->
	<bean name="employeeService" class="com.pacsun.service.EmployeeService">
		<property name="employee" ref="employee"></property>
	</bean>

	<!-- Configure Aspect Beans, without this Aspects advices wont execute -->
	<!-- Aspect: An aspect is a class that implements enterprise application concerns that cut across multiple classes, 
				 such as transaction management. Aspects can be a normal class configured through Spring XML configuration or 
				 we can use Spring AspectJ integration to define a class as Aspect using @Aspect annotation. -->
	<!-- Join Point: A join point is the specific point in the application such as method execution, exception handling, 
	                 changing object variable values etc. In Spring AOP a join points is always the execution of a method. -->
	<!-- Advice: Advices are actions taken for a particular join point. In terms of programming, 
	             they are methods that gets executed when a certain join point with matching pointcut is reached 
	             in the application. You can think of Advices as Struts2 interceptors or Servlet Filters. -->
	<!-- Pointcut: Pointcut are expressions that is matched with join points to determine whether advice needs to be executed or not. 
	               Pointcut uses different kinds of expressions that are matched with the join points and Spring framework uses 
	               the AspectJ pointcut expression language. -->
	<bean name="employeeAspect" class="com.pacsun.aspect.EmployeeAspect" />
	<bean name="employeeAspectPointcut" class="com.pacsun.aspect.EmployeeAspectPointcut" />
	<bean name="employeeAspectJoinPoint" class="com.pacsun.aspect.EmployeeAspectJoinPoint" />
	<bean name="employeeAfterAspect" class="com.pacsun.aspect.EmployeeAfterAspect" />
	<bean name="employeeAroundAspect" class="com.pacsun.aspect.EmployeeAroundAspect" />
	<bean name="employeeAnnotationAspect" class="com.pacsun.aspect.EmployeeAnnotationAspect" />
	<bean name="employeeXMLConfigAspect" class="com.pacsun.aspect.EmployeeXMLConfigAspect" />

	<!-- Spring AOP XML Configuration -->
	<aop:config>
		<aop:aspect ref="employeeXMLConfigAspect" id="employeeXMLConfigAspectID"
			order="1">
			<aop:pointcut
				expression="execution(* com.pacsun.model.Employee.getName())"
				id="getNamePointcut" />
			<aop:around method="employeeAroundAdvice" pointcut-ref="getNamePointcut"
				arg-names="proceedingJoinPoint" />
		</aop:aspect>
	</aop:config>
</beans>
